"""
Markdown Generator - Generate Markdown reports from test data

Purpose: Create formatted Markdown reports
"""

from typing import Dict, Any, List
from datetime import datetime


class MarkdownGenerator:
    """Generate Markdown reports from test results."""
    
    def generate(self, test_results: Dict[str, Any]) -> str:
        """Generate Markdown report from test results."""
        # Extract data
        tests = test_results.get("tests", [])
        summary = test_results.get("summary", {})
        
        # Build Markdown
        md = f"""# Test Report

Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Summary

| Metric | Value |
|--------|-------|
| Total Tests | {summary.get('total', 0)} |
| Passed | ✅ {summary.get('passed', 0)} |
| Failed | ❌ {summary.get('failed', 0)} |
| Skipped | ⏭️ {summary.get('skipped', 0)} |
| Success Rate | {self._calculate_success_rate(summary):.1f}% |

## Test Results

| Test Name | Status | Duration | Details |
|-----------|--------|----------|---------|
"""
        
        # Add test rows
        for test in tests:
            status = test.get('status', 'unknown')
            duration = test.get('duration', 0)
            error = test.get('error', '')
            
            # Status emoji
            status_emoji = {
                'passed': '✅',
                'failed': '❌',
                'skipped': '⏭️',
                'error': '⚠️'
            }.get(status, '❓')
            
            # Clean error message for table
            error_msg = error.replace('\n', ' ').replace('|', '\\|')[:100] if error else '-'
            
            md += f"| {test.get('name', 'Unknown')} | {status_emoji} {status} | {duration:.2f}s | {error_msg} |\n"
        
        # Add failed test details if any
        failed_tests = [t for t in tests if t.get('status') == 'failed']
        if failed_tests:
            md += "\n## Failed Test Details\n\n"
            for test in failed_tests:
                md += f"### {test.get('name', 'Unknown Test')}\n\n"
                if test.get('error'):
                    md += "```\n"
                    md += test['error']
                    md += "\n```\n\n"
        
        md += f"\n---\n\n*Generated by claude-test-reporter*\n"
        
        return md
    
    def _calculate_success_rate(self, summary: Dict[str, Any]) -> float:
        """Calculate success rate percentage."""
        total = summary.get('total', 0)
        if total == 0:
            return 0.0
        passed = summary.get('passed', 0)
        return (passed / total) * 100